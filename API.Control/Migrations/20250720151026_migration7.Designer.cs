// <auto-generated />
using System;
using API.Control.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Control.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250720151026_migration7")]
    partial class migration7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("API.Control.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Argument")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Filter")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("NameID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("API.Control.Models.AppxPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Architecture")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBundle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDevelopmentMode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFramework")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPartiallyStaged")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsResourcePackage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PackageFamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PackageFullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppxPackages");
                });

            modelBuilder.Entity("API.Control.Models.DeployProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("SourcePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("ProfileDeploys");
                });

            modelBuilder.Entity("API.Control.Models.DeployTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeployProfileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeployProfileId");

                    b.ToTable("DeployTask");
                });

            modelBuilder.Entity("API.Control.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeployProfileId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceModelId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeployProfileId");

                    b.HasIndex("DeviceModelId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("API.Control.Models.DeviceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeviceModels");
                });

            modelBuilder.Entity("API.Control.Models.DriverPack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceModelId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceModelId");

                    b.ToTable("DriverPacks");
                });

            modelBuilder.Entity("API.Control.Models.Firmware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceModelId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceModelId")
                        .IsUnique();

                    b.ToTable("Firmwares");
                });

            modelBuilder.Entity("API.Control.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("EditionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageIndex")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("ImageSize")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Languages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("API.Control.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("API.Control.Models.InventoryInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryInfos");
                });

            modelBuilder.Entity("ApplicationDeployProfile", b =>
                {
                    b.Property<Guid>("ApplicationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeployProfilesId")
                        .HasColumnType("TEXT");

                    b.HasKey("ApplicationsId", "DeployProfilesId");

                    b.HasIndex("DeployProfilesId");

                    b.ToTable("ApplicationDeployProfile");
                });

            modelBuilder.Entity("ApplicationDevice", b =>
                {
                    b.Property<Guid>("ApplicationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DevicesId")
                        .HasColumnType("TEXT");

                    b.HasKey("ApplicationsId", "DevicesId");

                    b.HasIndex("DevicesId");

                    b.ToTable("ApplicationDevice");
                });

            modelBuilder.Entity("ApplicationDeviceModel", b =>
                {
                    b.Property<Guid>("ApplicationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceModelsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ApplicationsId", "DeviceModelsId");

                    b.HasIndex("DeviceModelsId");

                    b.ToTable("ApplicationDeviceModel");
                });

            modelBuilder.Entity("AppxPackageDevice", b =>
                {
                    b.Property<Guid>("AppxPackagesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DevicesId")
                        .HasColumnType("TEXT");

                    b.HasKey("AppxPackagesId", "DevicesId");

                    b.HasIndex("DevicesId");

                    b.ToTable("AppxPackageDevice");
                });

            modelBuilder.Entity("API.Control.Models.DeployProfile", b =>
                {
                    b.HasOne("API.Control.Models.Image", "Image")
                        .WithMany("DeployProfiles")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("API.Control.Models.DeployTask", b =>
                {
                    b.HasOne("API.Control.Models.DeployProfile", null)
                        .WithMany("DeployTasks")
                        .HasForeignKey("DeployProfileId");
                });

            modelBuilder.Entity("API.Control.Models.Device", b =>
                {
                    b.HasOne("API.Control.Models.DeployProfile", "DeployProfile")
                        .WithMany("Devices")
                        .HasForeignKey("DeployProfileId");

                    b.HasOne("API.Control.Models.DeviceModel", "DeviceModel")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("API.Control.ValueObjects.ComputerName", "ComputerName", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("TEXT");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.Navigation("ComputerName")
                        .IsRequired();

                    b.Navigation("DeployProfile");

                    b.Navigation("DeviceModel");
                });

            modelBuilder.Entity("API.Control.Models.DriverPack", b =>
                {
                    b.HasOne("API.Control.Models.Device", null)
                        .WithMany("DriverPacks")
                        .HasForeignKey("DeviceId");

                    b.HasOne("API.Control.Models.DeviceModel", "DeviceModel")
                        .WithMany("DriverPacks")
                        .HasForeignKey("DeviceModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceModel");
                });

            modelBuilder.Entity("API.Control.Models.Firmware", b =>
                {
                    b.HasOne("API.Control.Models.DeviceModel", "DeviceModel")
                        .WithOne("Firmware")
                        .HasForeignKey("API.Control.Models.Firmware", "DeviceModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceModel");
                });

            modelBuilder.Entity("API.Control.Models.Inventory", b =>
                {
                    b.HasOne("API.Control.Models.Device", "Device")
                        .WithOne("Inventory")
                        .HasForeignKey("API.Control.Models.Inventory", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("API.Control.Models.InventoryInfo", b =>
                {
                    b.HasOne("API.Control.Models.Inventory", "Inventory")
                        .WithMany("Infos")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("ApplicationDeployProfile", b =>
                {
                    b.HasOne("API.Control.Models.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Control.Models.DeployProfile", null)
                        .WithMany()
                        .HasForeignKey("DeployProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationDevice", b =>
                {
                    b.HasOne("API.Control.Models.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Control.Models.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationDeviceModel", b =>
                {
                    b.HasOne("API.Control.Models.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Control.Models.DeviceModel", null)
                        .WithMany()
                        .HasForeignKey("DeviceModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppxPackageDevice", b =>
                {
                    b.HasOne("API.Control.Models.AppxPackage", null)
                        .WithMany()
                        .HasForeignKey("AppxPackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Control.Models.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Control.Models.DeployProfile", b =>
                {
                    b.Navigation("DeployTasks");

                    b.Navigation("Devices");
                });

            modelBuilder.Entity("API.Control.Models.Device", b =>
                {
                    b.Navigation("DriverPacks");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("API.Control.Models.DeviceModel", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("DriverPacks");

                    b.Navigation("Firmware");
                });

            modelBuilder.Entity("API.Control.Models.Image", b =>
                {
                    b.Navigation("DeployProfiles");
                });

            modelBuilder.Entity("API.Control.Models.Inventory", b =>
                {
                    b.Navigation("Infos");
                });
#pragma warning restore 612, 618
        }
    }
}
