using DCM.Core.Entities.secondary;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace DCM.Core.Entities
{
    /// <summary>
    /// Representa um perfil de implantação, incluindo imagem, aplicativos, dispositivos e tarefas associadas.
    /// </summary>
    public class DeployProfile : BaseEntity
    {
        /// <summary>
        /// Nome do perfil de implantação.
        /// </summary>
        [Required, StringLength(100)]
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Descrição do perfil de implantação.
        /// </summary>
        [StringLength(240)]
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Chave estrangeira para a imagem associada ao perfil.
        /// </summary>
        [Required]
        public Guid ImageId { get; set; }

        /// <summary>
        /// Imagem associada ao perfil.
        /// </summary>
        public virtual Image Image { get; set; }

        /// <summary>
        /// Construtor vazio para o Entity Framework.
        /// </summary>
        public DeployProfile() { }


        /// <summary>
        /// Construtor para criação de perfil de implantação com nome, descrição e imagem.
        /// </summary>
        public DeployProfile(string name, string description, Image image)
        {
            Name = name;
            Description = description;
            Image = image ?? throw new ArgumentNullException(nameof(image));
            ImageId = image.Id;
        }

        #region Devices - Encapsulated with DomainCollection
        /// <summary>
        /// Backing para EF Core.
        /// </summary>
        public virtual ICollection<Device> Devices { get; set; } = new List<Device>();

        /// <summary>
        /// Adiciona um dispositivo ao perfil com regras de domínio.
        /// </summary>
        public void AddDevice(Device device)
            => this.AddItem(Devices, device, ValidateDeviceAssignment);

        /// <summary>
        /// Remove um dispositivo do perfil.
        /// </summary>
        public void RemoveDevice(Device device)
            => this.RemoveItem(Devices, device);

        /// <summary>
        /// Verifica se o perfil contém um dispositivo específico.
        /// </summary>
        public bool ContainsDevice(Device device) => Devices.ContainsItem(device);

        /// <summary>
        /// Valida se um dispositivo pode ser adicionado ao perfil.
        /// </summary>
        private void ValidateDeviceAssignment(Device device)
        {
            // Regra de negócio: dispositivo deve estar habilitado
            if (!device.Enabled)
                throw new InvalidOperationException("Cannot add disabled device to deploy profile");
            
            // Regra de negócio: perfil deve estar habilitado
            if (!Enabled)
                throw new InvalidOperationException("Cannot add device to disabled deploy profile");
        }

        #endregion

        #region ApplicationGroups - Encapsulated with DomainCollection
        /// <summary>
        /// Backing para EF Core.
        /// </summary>
        public virtual ICollection<ApplicationGroup> ApplicationGroups { get; set; } = new List<ApplicationGroup>();

        /// <summary>
        /// Adiciona um grupo de aplicações ao perfil.
        /// </summary>
        public void AddApplicationGroup(ApplicationGroup applicationGroup)
            => this.AddItem(ApplicationGroups, applicationGroup, ag =>
            {
                // Regra de negócio: perfil deve estar habilitado
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add application group to disabled profile");
            });

        /// <summary>
        /// Remove um grupo de aplicações do perfil.
        /// </summary>
        public void RemoveApplicationGroup(ApplicationGroup applicationGroup)
            => this.RemoveItem(ApplicationGroups, applicationGroup);

        /// <summary>
        /// Remove todos os grupos de aplicações do perfil.
        /// </summary>
        public void ClearApplicationGroups() => this.ClearItems(ApplicationGroups);

        /// <summary>
        /// Verifica se o perfil contém um grupo específico.
        /// </summary>
        /// <param name="applicationGroup">Grupo a ser verificado</param>
        /// <returns>True se contém o grupo, false caso contrário</returns>
        public bool ContainsApplicationGroup(ApplicationGroup applicationGroup)
            => ApplicationGroups.ContainsItem(applicationGroup);
        #endregion

        #region AppxPackageGroups - Encapsulated with DomainCollection
        /// <summary>
        /// Backing para EF Core.
        /// </summary>
        public virtual ICollection<AppxPackageGroup> AppxPackageGroups { get; set; } = new List<AppxPackageGroup>();

        /// <summary>
        /// Adiciona um grupo de pacotes AppX ao perfil.
        /// </summary>
        public void AddAppxPackageGroup(AppxPackageGroup appxPackageGroup)
            => this.AddItem(AppxPackageGroups, appxPackageGroup, g =>
            {
                // Regra de negócio: perfil deve estar habilitado
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add appx package group to disabled profile");
            });

        /// <summary>
        /// Remove um grupo de pacotes AppX do perfil.
        /// </summary>
        public void RemoveAppxPackageGroup(AppxPackageGroup appxPackageGroup)
            => this.RemoveItem(AppxPackageGroups, appxPackageGroup);
        #endregion

        #region ProfileTasks - Encapsulated with DomainCollection
        /// <summary>
        /// Backing para EF Core.
        /// </summary>
        public virtual ICollection<ProfileTask> ProfileTasks { get; set; } = new List<ProfileTask>();

        /// <summary>
        /// Adiciona uma tarefa ao perfil.
        /// </summary>
        public void AddProfileTask(ProfileTask profileTask)
            => this.AddItem(ProfileTasks, profileTask, t =>
            {
                // Regra de negócio: perfil deve estar habilitado
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add profile task to disabled profile");
            });

        /// <summary>
        /// Remove uma tarefa do perfil.
        /// </summary>
        public void RemoveProfileTask(ProfileTask profileTask)
            => this.RemoveItem(ProfileTasks, profileTask);
        #endregion


        /// <summary>
        /// Obtém a contagem total de aplicações associadas a este perfil.
        /// </summary>
        public int ApplicationGroupCount => ApplicationGroups.Count;

        /// <summary>
        /// Verifica se o perfil possui aplicações associadas.
        /// </summary>
        public bool HasApplications => ApplicationGroups.Count > 0;

        /// <summary>
        /// Obtém a contagem total de dispositivos associados a este perfil.
        /// </summary>
        public int DeviceCount => Devices?.Count ?? 0;

        /// <summary>
        /// Obtém a contagem total de tarefas associadas a este perfil.
        /// </summary>
        public int ProfileTaskCount => ProfileTasks?.Count ?? 0;

        /// <summary>
        /// Verifica se o perfil possui dispositivos associados.
        /// </summary>
        public bool HasDevices => DeviceCount > 0;

        /// <summary>
        /// Verifica se o perfil possui tarefas associadas.
        /// </summary>
        public bool HasProfileTasks => ProfileTaskCount > 0;
    }
}
