using DCM.Core.Entities;
using DCM.Core.Utilities;
using Microsoft.EntityFrameworkCore;

namespace DCM.Infrastructure.Persistence
{
    /// <summary>
    /// Contexto principal do Entity Framework para o domínio da aplicação.
    /// </summary>
    public class AppDbContext(DbContextOptions<AppDbContext> options) : DbContext(options)
    {
        //public DbSet<Application> Products => Set<Application>();
        // DbSets para entidades principais
        public DbSet<Application> Applications { get; private set; }
        public DbSet<AppxPackage> AppxPackages { get; private set; }
        public DbSet<Device> Devices { get; private set; }
        public DbSet<DeviceModel> DeviceModels { get; private set; }
        public DbSet<DriverPack> DriverPacks { get; private set; }
        public DbSet<Firmware> Firmwares { get; private set; }
        public DbSet<Image> Images { get; private set; }
        public DbSet<Inventory> Inventories { get; private set; }
        public DbSet<DeployProfile> DeployProfiles { get; private set; }
        public DbSet<ProfileTask> ProfileTasks { get; private set; }
        public DbSet<Manufacturer> Manufacturers { get; private set; }
        public DbSet<DCM.Core.Entities.OperatingSystem> OperatingSystems { get; private set; }

        /// <summary>
        /// Atualiza o campo UpdatedAt automaticamente para entidades modificadas.
        /// </summary>
        public override int SaveChanges()
        {
            SetUpdatedAt();
            return base.SaveChanges();
        }

        /// <summary>
        /// Atualiza o campo UpdatedAt automaticamente para entidades modificadas (assíncrono).
        /// </summary>
        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            SetUpdatedAt();
            return await base.SaveChangesAsync(cancellationToken);
        }

        /// <summary>
        /// Define a data de atualização para entidades modificadas.
        /// </summary>
        private void SetUpdatedAt()
        {
            var entidadesAlteradas = ChangeTracker.Entries<BaseEntity>()
                .Where(e => e.State == EntityState.Modified);

            foreach (var entry in entidadesAlteradas)
            {
                // Use o método interno para definir UpdatedAt, pois o setter é protegido
                entry.Entity.Update();
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            ConfigureDevice(modelBuilder);

        }

        private static void ConfigureDevice(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Device>(entity =>
            {
                entity.HasKey(d => d.Id);

                entity.Property(s => s.SerialNumber)
                      .IsRequired()
                      .HasMaxLength(50);

                entity.HasIndex(s => s.SerialNumber)
                      .IsUnique();

                entity.Property(d => d.MacAddress).HasConversion(
                    v => v.Value,
                    value => new MacAddress(value))
                    .HasColumnName("MacAddress");

                entity.Property(d => d.ComputerName).HasConversion(
                        v => v.Value,
                        value => new ComputerName(value)
                    )
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("ComputerName");

                entity.HasIndex(c => c.ComputerName)
                      .IsUnique();

                entity.HasOne(d => d.DeviceModel)
                      .WithMany(dm => dm.Devices)
                      .HasForeignKey(d => d.DeviceModelId)
                      .OnDelete(DeleteBehavior.Cascade);

                // Relacionamentos muitos-para-muitos
                entity.HasMany(d => d.Applications)
                      .WithMany(a => a.Devices);

                entity.HasMany(d => d.DriverPacks)
                      .WithMany();

                entity.HasMany(d => d.AppxPackages)
                      .WithMany(a => a.Devices);
            });

            // DEVICE MODEL
            modelBuilder.Entity<DeviceModel>(entity =>
            {
                entity.HasKey(dm => dm.Id);

                entity.Property(dm => dm.Model)
                      .IsRequired()
                      .HasMaxLength(100);

                entity.Property(dm => dm.Type)
                      .HasMaxLength(50);

                entity.Property(dm => dm.Enabled)
                      .IsRequired();

                // Relacionamento 1:1 com Firmware
                entity.HasOne(dm => dm.Firmware)
                      .WithOne(fw => fw.DeviceModel)
                      .HasForeignKey<Firmware>(fw => fw.DeviceModelId)
                      .OnDelete(DeleteBehavior.Cascade);

                // Relacionamento 1:N com DriverPack
                entity.HasMany(dm => dm.DriverPacks)
                      .WithOne(dp => dp.DeviceModel)
                      .HasForeignKey(dp => dp.DeviceModelId)
                      .OnDelete(DeleteBehavior.Cascade);

                // Relacionamento muitos-para-muitos com Application
                entity.HasMany(dm => dm.Applications)
                      .WithMany(a => a.DeviceModels);
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.OwnsOne(a => a, category =>
                {
                    category.Property(c => c.Name)
                        .HasMaxLength(50)
                        .IsRequired();

                    category.Property(c => c.Description)
                        .HasMaxLength(200);
                });
            });

            // FIRMWARE
            modelBuilder.Entity<Firmware>(entity =>
            {
                entity.HasKey(fw => fw.Id);
                entity.Property(fw => fw.FileName).IsRequired().HasMaxLength(100);
                entity.Property(fw => fw.Version).IsRequired().HasMaxLength(50);
                entity.Property(fw => fw.Source).IsRequired().HasMaxLength(200);
                entity.Property(fw => fw.Hash).IsRequired().HasMaxLength(64);
            });

            // DRIVERPACK
            modelBuilder.Entity<DriverPack>(entity =>
            {
                entity.HasKey(dp => dp.Id);

                entity.Property(dp => dp.FileName).IsRequired().HasMaxLength(100);
                entity.Property(dp => dp.OS).IsRequired().HasMaxLength(50);
                entity.Property(dp => dp.Version).IsRequired().HasMaxLength(50);
                entity.Property(dp => dp.Source).IsRequired().HasMaxLength(200);
                entity.Property(dp => dp.Hash).IsRequired().HasMaxLength(64);
            });

            // DEPLOY PROFILE
            modelBuilder.Entity<DeployProfile>(entity =>
            {
                entity.HasKey(dp => dp.Id);

                entity.Property(dp => dp.Name)
                      .IsRequired()
                      .HasMaxLength(100);

                entity.Property(dp => dp.Description)
                      .HasMaxLength(250);

                entity.HasOne(dp => dp.Image)
                      .WithMany(i => i.DeployProfiles)
                      .HasForeignKey(dp => dp.ImageId)
                      .OnDelete(DeleteBehavior.Restrict);

                entity.HasMany(dp => dp.Applications);
                entity.HasMany(dp => dp.Devices);
                entity.HasMany(dp => dp.ProfileTasks);
            });

            // PROFILE TASK
            modelBuilder.Entity<ProfileTask>(entity =>
            {
                entity.HasKey(pt => pt.Id);

                entity.Property(pt => pt.Name)
                      .IsRequired()
                      .HasMaxLength(100);

                // Salvar o enum ProfileTaskPhase como string no banco
                entity.Property(pt => pt.Phase)
                      .HasConversion<string>();
            });

            // IMAGE
            modelBuilder.Entity<Image>(entity =>
            {
                entity.HasKey(i => i.Id);

                entity.Property(i => i.ImageName)
                      .IsRequired()
                      .HasMaxLength(100);

                entity.Property(i => i.ImageDescription)
                      .HasMaxLength(250);

                entity.Property(i => i.ImageIndex)
                      .IsRequired()
                      .HasMaxLength(20);

                entity.Property(i => i.EditionId)
                      .IsRequired()
                      .HasMaxLength(50);

                entity.Property(i => i.Version)
                      .IsRequired()
                      .HasMaxLength(20);

                entity.Property(i => i.Source)
                      .IsRequired()
                      .HasMaxLength(250);

                // Relacionamento com DeployProfiles
                entity.HasMany(i => i.DeployProfiles)
                      .WithOne(dp => dp.Image)
                      .HasForeignKey(dp => dp.ImageId)
                      .OnDelete(DeleteBehavior.Restrict);
            });

        }
    }
}
