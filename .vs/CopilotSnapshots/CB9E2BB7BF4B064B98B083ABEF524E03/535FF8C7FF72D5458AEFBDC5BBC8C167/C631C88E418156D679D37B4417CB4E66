using DCM.Application.DTOs.DeployProfile;

namespace DCM.Application.Services.Interfaces
{
    public interface IDeployProfileService
    {
        #region CRUD Operations
        Task<IEnumerable<DeployProfileReadDTO>> GetAllAsync(CancellationToken cancellationToken = default);
        Task<DeployProfileReadDTO?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default);
        Task<DeployProfileReadDTO?> GetByNameAsync(string name, CancellationToken cancellationToken = default);
        Task<IEnumerable<DeployProfileReadDTO>> GetActiveProfilesAsync(CancellationToken cancellationToken = default);
        Task<DeployProfileReadDTO> CreateAsync(DeployProfileCreateDTO dto, CancellationToken cancellationToken = default);
        Task<DeployProfileReadDTO?> UpdateAsync(Guid id, DeployProfileUpdateDTO dto, CancellationToken cancellationToken = default);
        Task<bool> DeleteAsync(Guid id, CancellationToken cancellationToken = default);
        Task<bool> ExistsAsync(Guid id, CancellationToken cancellationToken = default);
        #endregion

        #region Device Assignment
        /// <summary>
        /// Adiciona um dispositivo a um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="deviceId">ID do dispositivo a ser adicionado</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>True se adicionado com sucesso</returns>
        Task<bool> AddDeviceAsync(Guid profileId, Guid deviceId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove um dispositivo de um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="deviceId">ID do dispositivo a ser removido</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>True se removido com sucesso</returns>
        Task<bool> RemoveDeviceAsync(Guid profileId, Guid deviceId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Obtém todos os dispositivos de um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>Lista de IDs de dispositivos</returns>
        Task<List<Guid>> GetDevicesAsync(Guid profileId, CancellationToken cancellationToken = default);
        #endregion

        #region Application Group Assignment
        /// <summary>
        /// Adiciona um grupo de aplicações a um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="applicationGroupId">ID do grupo de aplicações</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>True se adicionado com sucesso</returns>
        Task<bool> AddApplicationGroupAsync(Guid profileId, Guid applicationGroupId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove um grupo de aplicações de um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="applicationGroupId">ID do grupo de aplicações</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>True se removido com sucesso</returns>
        Task<bool> RemoveApplicationGroupAsync(Guid profileId, Guid applicationGroupId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Obtém todos os grupos de aplicações de um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>Lista de IDs de grupos de aplicações</returns>
        Task<List<Guid>> GetApplicationGroupsAsync(Guid profileId, CancellationToken cancellationToken = default);
        #endregion

        #region Profile Task Assignment
        /// <summary>
        /// Adiciona uma tarefa a um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="profileTaskId">ID da tarefa</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>True se adicionado com sucesso</returns>
        Task<bool> AddProfileTaskAsync(Guid profileId, Guid profileTaskId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove uma tarefa de um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="profileTaskId">ID da tarefa</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>True se removido com sucesso</returns>
        Task<bool> RemoveProfileTaskAsync(Guid profileId, Guid profileTaskId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Obtém todas as tarefas de um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>Lista de IDs de tarefas</returns>
        Task<List<Guid>> GetProfileTasksAsync(Guid profileId, CancellationToken cancellationToken = default);
        #endregion

        #region AppX Package Group Assignment
        /// <summary>
        /// Adiciona um grupo de pacotes AppX a um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="appxPackageGroupId">ID do grupo de pacotes AppX</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>True se adicionado com sucesso</returns>
        Task<bool> AddAppxPackageGroupAsync(Guid profileId, Guid appxPackageGroupId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Remove um grupo de pacotes AppX de um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="appxPackageGroupId">ID do grupo de pacotes AppX</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>True se removido com sucesso</returns>
        Task<bool> RemoveAppxPackageGroupAsync(Guid profileId, Guid appxPackageGroupId, CancellationToken cancellationToken = default);

        /// <summary>
        /// Obtém todos os grupos de pacotes AppX de um perfil de implantação.
        /// </summary>
        /// <param name="profileId">ID do perfil de implantação</param>
        /// <param name="cancellationToken">Token de cancelamento</param>
        /// <returns>Lista de IDs de grupos de pacotes AppX</returns>
        Task<List<Guid>> GetAppxPackageGroupsAsync(Guid profileId, CancellationToken cancellationToken = default);
        #endregion
    }
}