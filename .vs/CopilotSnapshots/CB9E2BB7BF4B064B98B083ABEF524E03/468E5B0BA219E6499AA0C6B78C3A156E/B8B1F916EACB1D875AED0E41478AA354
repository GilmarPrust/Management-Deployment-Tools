using DCM.Core.Entities.secondary;
using DCM.Core.Enums;
using DCM.Core.ValueObjects;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace DCM.Core.Entities
{
    /// <summary>
    /// Representa um aplicativo associado a dispositivos, modelos e perfis de implantação.
    /// </summary>
    public class Application : BaseEntity
    {
        /// <summary>
        /// Identificador único do aplicativo.
        /// </summary>
        [Required, StringLength(50)]
        public string NameID { get; set; } = string.Empty;

        /// <summary>
        /// Nome de exibição do aplicativo.
        /// </summary>
        [Required, StringLength(100)]
        public string DisplayName { get; set; } = string.Empty;

        /// <summary>
        /// Versão do aplicativo.
        /// </summary>
        [Required, StringLength(50)]
        public string Version { get; set; } = string.Empty;

        /// <summary>
        /// Nome do arquivo de instalação do aplicativo.
        /// </summary>
        [Required, StringLength(100)]
        public string FileName { get; set; } = string.Empty;

        /// <summary>
        /// Argumentos de linha de comando para instalação.
        /// </summary>
        [StringLength(240)]
        public string Argument { get; set; } = string.Empty;

        /// <summary>
        /// Caminho de origem do instalador.
        /// </summary>
        [Required, StringLength(240)]
        public string Source { get; set; } = string.Empty;

        /// <summary>
        /// Filtro opcional para o aplicativo.
        /// </summary>
        [StringLength(100)]
        public string Filter { get; set; } = string.Empty;

        /// <summary>
        /// Hash do arquivo de instalação.
        /// </summary>
        [StringLength(64)]
        public string Hash { get; set; } = string.Empty;

        /// <summary>
        /// Construtor vazio para o Entity Framework.
        /// </summary>
        public Application() { }

        /// <summary>
        /// Construtor para criar uma aplicação com todos os dados necessários.
        /// </summary>
        public Application(string nameId, string displayName, string version, string fileName, 
                           string source, string hash, ApplicationCategory category)
        {
            if (string.IsNullOrWhiteSpace(nameId))
                throw new ArgumentException("NameID cannot be empty", nameof(nameId));
            if (string.IsNullOrWhiteSpace(displayName))
                throw new ArgumentException("DisplayName cannot be empty", nameof(displayName));
            if (string.IsNullOrWhiteSpace(version))
                throw new ArgumentException("Version cannot be empty", nameof(version));
            if (string.IsNullOrWhiteSpace(fileName))
                throw new ArgumentException("FileName cannot be empty", nameof(fileName));
            if (string.IsNullOrWhiteSpace(source))
                throw new ArgumentException("Source cannot be empty", nameof(source));
            if (string.IsNullOrWhiteSpace(hash))
                throw new ArgumentException("Hash cannot be empty", nameof(hash));
            ArgumentNullException.ThrowIfNull(category);

            NameID = nameId;
            DisplayName = displayName;
            Version = version;
            FileName = fileName;
            Source = source;
            Hash = hash;
        }

        /// <summary>
        /// Configuração de prioridade do aplicativo.
        /// </summary>
        private ApplicationConfig? ApplicationConfig;
        public ApplicationConfig Config 
        {
            get => ApplicationConfig ??= new ApplicationConfig { ApplicationId = Id };
            set => ApplicationConfig = value;
        }

        /// <summary>
        /// Inicializa ou atualiza a configuração do aplicativo.
        /// </summary>
        public void InitializeConfig(ApplicationGroup defaultGroup)
        {
            ArgumentNullException.ThrowIfNull(defaultGroup);

            if (ApplicationConfig == null)
                ApplicationConfig = ApplicationConfig.CreateDefault(Id, defaultGroup);
            else
                ApplicationConfig.EnsureDefaultGroup(defaultGroup);
            Update();
        }
    }
}
