using DCM.Core.Enums;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;

namespace DCM.Core.Entities.secondary
{
    /// <summary>
    /// Representa o sistema de prioridades e dependências para instalação de aplicativos.
    /// Controla a ordem de execução baseada em dependências e prioridades.
    /// </summary>
    public class ApplicationConfig : BaseEntity
    {
        /// <summary>
        /// ID da aplicação principal.
        /// </summary>
        [Required]
        public Guid ApplicationId { get; set; }

        /// <summary>
        /// Aplicação principal.
        /// </summary>
        public virtual Application Application { get; set; }

        /// <summary>
        /// Dispositivos associados ao aplicativo.
        /// </summary>
        public virtual ICollection<Device> Devices { get; set; } = new List<Device>();

        /// <summary>
        /// Modelos de dispositivo associados ao aplicativo.
        /// </summary>
        public virtual ICollection<DeviceModel> DeviceModels { get; set; } = new List<DeviceModel>();

        /// <summary>
        /// Perfis de implantação associados ao aplicativo.
        /// </summary>
        public virtual ICollection<DeployProfile> DeployProfiles { get; set; } = new List<DeployProfile>();

        /// <summary>
        /// Lista de dependências das quais esta aplicação depende.
        /// Essas aplicações devem ser instaladas ANTES desta.
        /// </summary>
        public virtual ICollection<ApplicationDependency> Dependencies { get; set; } = new List<ApplicationDependency>();

        /// <summary>
        /// Lista de aplicações que dependem desta.
        /// Esta aplicação deve ser instalada ANTES delas.
        /// </summary>
        public virtual ICollection<ApplicationDependency> Dependents { get; set; } = new List<ApplicationDependency>();

        /// <summary>
        /// Grupos de aplicações aos quais este aplicativo pertence (relacionamento many-to-many).
        /// </summary>
        [Required]
        public virtual ICollection<ApplicationGroup> Groups { get; set; } = new List<ApplicationGroup>();

        /// <summary>
        /// Observações sobre a prioridade ou dependências.
        /// </summary>
        [StringLength(500)]
        public string? Notes { get; set; }

        /// <summary>
        /// Indica se esta aplicação é obrigatória (não pode ser pulada na instalação).
        /// </summary>
        public bool IsRequired { get; set; } = false;

        /// <summary>
        /// Indica se esta aplicação deve ser instalada em modo silencioso.
        /// </summary>
        public bool IsSilentInstall { get; set; } = true;

        /// <summary>
        /// Tempo estimado de instalação em minutos.
        /// </summary>
        [Range(0, 999, ErrorMessage = "O tempo estimado deve estar entre 0 e 999 minutos.")]
        public int EstimatedInstallTimeMinutes { get; set; } = 5;

        /// <summary>
        /// Construtor vazio para o Entity Framework.
        /// </summary>
        public ApplicationConfig() { }

        /// <summary>
        /// Construtor para criar uma configuração padrão para uma aplicação.
        /// </summary>
        /// <param name="applicationId">ID da aplicação</param>
        /// <param name="defaultGroup">Grupo padrão para adicionar a aplicação</param>
        public ApplicationConfig(Guid applicationId, ApplicationGroup defaultGroup)
        {
            ApplicationId = applicationId;
            IsRequired = false;
            IsSilentInstall = true;
            EstimatedInstallTimeMinutes = 5;
            Notes = "Configuração criada automaticamente";

            // Adiciona ao grupo padrão
            if (defaultGroup != null)
            {
                Groups.Add(defaultGroup);
            }
        }

        /// <summary>
        /// Cria uma configuração padrão com valores seguros para uma nova aplicação.
        /// </summary>
        /// <param name="applicationId">ID da aplicação</param>
        /// <param name="defaultGroup">Grupo padrão "ALL"</param>
        /// <returns>Nova configuração padrão</returns>
        public static ApplicationConfig CreateDefault(Guid applicationId, ApplicationGroup defaultGroup)
        {
            return new ApplicationConfig(applicationId, defaultGroup)
            {
                Notes = $"Configuração padrão criada automaticamente em {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC"
            };
        }

        /// <summary>
        /// Adiciona a aplicação ao grupo padrão "ALL" se ainda não estiver em nenhum grupo.
        /// </summary>
        /// <param name="defaultGroup">Grupo padrão "ALL"</param>
        public void EnsureDefaultGroup(ApplicationGroup defaultGroup)
        {
            if (defaultGroup == null) return;

            if (!Groups.Any())
            {
                Groups.Add(defaultGroup);
                Notes = (Notes ?? "") + $" | Adicionado ao grupo padrão '{defaultGroup.Name}' automaticamente.";
            }
        }

        /// <summary>
        /// Adiciona uma dependência a esta aplicação.
        /// </summary>
        /// <param name="dependencyApplicationId">ID da aplicação da qual esta depende</param>
        /// <param name="dependencyType">Tipo de dependência</param>
        public void AddDependency(Guid dependencyApplicationId, DependencyType dependencyType = DependencyType.Required)
        {
            if (dependencyApplicationId == ApplicationId)
                throw new InvalidOperationException("Uma aplicação não pode depender de si mesma.");

            var dependency = new ApplicationDependency
            {
                ApplicationId = ApplicationId,
                DependsOnApplicationId = dependencyApplicationId
            };

            Dependencies.Add(dependency);
        }

        /// <summary>
        /// Remove uma dependência desta aplicação.
        /// </summary>
        /// <param name="dependencyApplicationId">ID da aplicação da dependência a ser removida</param>
        public void RemoveDependency(Guid dependencyApplicationId)
        {
            var dependency = Dependencies.FirstOrDefault(d => d.DependsOnApplicationId == dependencyApplicationId);
            if (dependency != null)
            {
                Dependencies.Remove(dependency);
            }
        }

        /// <summary>
        /// Adiciona um grupo de aplicações a esta configuração.
        /// </summary>
        /// <param name="group">Grupo a ser adicionado</param>
        public void AddToGroup(ApplicationGroup group)
        {
            if (group != null && !Groups.Contains(group))
            {
                Groups.Add(group);
                Update();
            }
        }

        /// <summary>
        /// Remove um grupo de aplicações desta configuração.
        /// </summary>
        /// <param name="group">Grupo a ser removido</param>
        public void RemoveFromGroup(ApplicationGroup group)
        {
            if (group != null && Groups.Contains(group))
            {
                Groups.Remove(group);
                Update();
            }
        }

        /// <summary>
        /// Verifica se a configuração está associada a algum grupo.
        /// </summary>
        public bool HasGroups => Groups.Any();

        /// <summary>
        /// Verifica se a configuração está no grupo especificado.
        /// </summary>
        /// <param name="groupName">Nome do grupo</param>
        /// <returns>True se está no grupo, false caso contrário</returns>
        public bool IsInGroup(string groupName)
        {
            return Groups.Any(g => g.Name.Equals(groupName, StringComparison.OrdinalIgnoreCase));
        }

        /// <summary>
        /// Verifica se a configuração está no grupo padrão "ALL".
        /// </summary>
        public bool IsInDefaultGroup => IsInGroup("ALL");
    }
}
