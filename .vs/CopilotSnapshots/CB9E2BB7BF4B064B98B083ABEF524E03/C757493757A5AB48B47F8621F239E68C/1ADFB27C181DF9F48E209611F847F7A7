using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace DCM.Core.Entities.secondary
{
    /// <summary>
    /// Representa um grupo de aplicações para organização e implantação conjunta.
    /// </summary>
    public class ApplicationGroup : BaseEntity
    {
        /// <summary>
        /// Nome do grupo de aplicações.
        /// </summary>
        [Required, StringLength(100)]
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Descrição do grupo de aplicações.
        /// </summary>
        [StringLength(240)]
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Prioridade do grupo para ordenação de instalação.
        /// Valores menores têm maior prioridade.
        /// </summary>
        [Range(1, 9999, ErrorMessage = "A prioridade deve estar entre 1 e 9999.")]
        public int Priority { get; set; } = 100;

        /// <summary>
        /// Construtor vazio para o Entity Framework.
        /// </summary>
        public ApplicationGroup() { }

        /// <summary>
        /// Construtor para criar um grupo com nome e descrição.
        /// </summary>
        /// <param name="name">Nome do grupo</param>
        /// <param name="description">Descrição do grupo</param>
        /// <param name="priority">Prioridade do grupo (padrão: 100)</param>
        public ApplicationGroup(string name, string description = "", int priority = 100)
        {
            Name = name;
            Description = description;
            Priority = priority;
        }

        /// <summary>
        /// Dispositivos associadas ao grupo (relacionamento many-to-many).
        /// </summary>
        public virtual ICollection<Device> Devices { get; set; } = new List<Device>();

        /// <summary>
        /// Modelos de dispositivos associados ao grupo (relacionamento many-to-many).
        /// </summary>
        public virtual ICollection<DeviceModel> DeviceModels { get; set; } = new List<DeviceModel>();

        /// <summary>
        /// Aplicações associadas ao grupo (relacionamento many-to-many).
        /// </summary>
        public virtual ICollection<Application> Applications { get; set; } = new List<Application>();

        /// <summary>
        /// Perfis de implantação que utilizam este grupo.
        /// </summary>
        public virtual ICollection<DeployProfile> DeployProfiles { get; set; } = new List<DeployProfile>();

        /// <summary>
        /// Verifica se o grupo tem aplicações associadas.
        /// </summary>
        public bool HasApplications => Applications?.Count > 0;

        /// <summary>
        /// Obtém a contagem de aplicações no grupo.
        /// </summary>
        public int ApplicationCount => Applications?.Count ?? 0;

        /// <summary>
        /// Adiciona uma aplicação ao grupo com regras de domínio.
        /// </summary>
        /// <param name="application">Aplicação a ser adicionada</param>
        public void AddApplication(Application application)
        {
            this.AddItem(Applications, application, app =>
            {
                if (!Enabled)
                    throw new System.InvalidOperationException("Cannot add application to disabled group");
            });
        }

        /// <summary>
        /// Remove uma aplicação do grupo.
        /// </summary>
        /// <param name="application">Aplicação a ser removida</param>
        public void RemoveApplication(Application application)
        {
            this.RemoveItem(Applications, application);
        }

        /// <summary>
        /// Verifica se uma aplicação pertence ao grupo.
        /// </summary>
        public bool ContainsApplication(Application application) => Applications.ContainsItem(application);

        /// <summary>
        /// Adiciona um dispositivo ao grupo com regras de domínio.
        /// </summary>
        /// <param name="device">Dispositivo a ser adicionado</param>
        public void AddDevice(Device device)
        {
            this.AddItem(Devices, device, d =>
            {
                if (!Enabled)
                    throw new System.InvalidOperationException("Cannot add device to disabled group");
            });
        }

        /// <summary>
        /// Remove um dispositivo do grupo.
        /// </summary>
        /// <param name="device">Dispositivo a ser removido</param>
        public void RemoveDevice(Device device)
        {
            this.RemoveItem(Devices, device);
        }

        /// <summary>
        /// Verifica se um dispositivo pertence ao grupo.
        /// </summary>
        public bool ContainsDevice(Device device) => Devices.ContainsItem(device);

        /// <summary>
        /// Adiciona um modelo de dispositivo ao grupo com regras de domínio.
        /// </summary>
        /// <param name="model">Modelo de dispositivo a ser adicionado</param>
        public void AddDeviceModel(DeviceModel model)
        {
            this.AddItem(DeviceModels, model, m =>
            {
                if (!Enabled)
                    throw new System.InvalidOperationException("Cannot add device model to disabled group");
            });
        }

        /// <summary>
        /// Remove um modelo de dispositivo do grupo.
        /// </summary>
        /// <param name="model">Modelo de dispositivo a ser removido</param>
        public void RemoveDeviceModel(DeviceModel model)
        {
            this.RemoveItem(DeviceModels, model);
        }

        /// <summary>
        /// Verifica se um modelo de dispositivo pertence ao grupo.
        /// </summary>
        public bool ContainsDeviceModel(DeviceModel model) => DeviceModels.ContainsItem(model);
    }
}