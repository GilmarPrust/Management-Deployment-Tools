using DCM.Core.Entities.secondary;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace DCM.Core.Entities
{
    /// <summary>
    /// Representa um modelo de dispositivo, incluindo fabricante, modelo, tipo e associações.
    /// </summary>
    public class DeviceModel : BaseEntity
    {
        /// <summary>
        /// Nome do fabricante do modelo de dispositivo.
        /// </summary>
        [Required, StringLength(50)]
        public string Manufacturer { get; set; } = string.Empty;

        /// <summary>
        /// Nome do modelo do dispositivo.
        /// </summary>
        [Required, StringLength(50)]
        public string Model { get; set; } = string.Empty;

        /// <summary>
        /// Tipo do modelo de dispositivo.
        /// </summary>
        [StringLength(50)]
        public string Type { get; set; } = string.Empty;

        /// <summary>
        /// Construtor vazio para o Entity Framework.
        /// </summary>
        public DeviceModel() { }

        /// <summary>
        /// Construtor para criar um modelo de dispositivo com dados necessários.
        /// </summary>
        /// <param name="manufacturer">Nome do fabricante</param>
        /// <param name="model">Nome do modelo</param>
        /// <param name="type">Tipo do dispositivo (opcional)</param>
        public DeviceModel(string manufacturer, string model, string type = "")
        {
            if (string.IsNullOrWhiteSpace(manufacturer))
                throw new ArgumentException("Manufacturer cannot be empty", nameof(manufacturer));
            if (string.IsNullOrWhiteSpace(model))
                throw new ArgumentException("Model cannot be empty", nameof(model));

            Manufacturer = manufacturer;
            Model = model;
            Type = type;
        }

        /// <summary>
        /// Firmware associado ao modelo de dispositivo (opcional).
        /// </summary>
        public virtual Firmware? Firmware { get; set; }

        // Backings para EF Core com lazy initialization
        private ICollection<Device>? _devices;
        public virtual ICollection<Device> Devices 
        {
            get => _devices ??= new List<Device>();
            set => _devices = value;
        }

        private ICollection<DriverPack>? _driverPacks;
        public virtual ICollection<DriverPack> DriverPacks 
        {
            get => _driverPacks ??= new List<DriverPack>();
            set => _driverPacks = value;
        }

        private ICollection<ApplicationGroup>? _applicationGroups;
        public virtual ICollection<ApplicationGroup> ApplicationGroups 
        {
            get => _applicationGroups ??= new List<ApplicationGroup>();
            set => _applicationGroups = value;
        }

        private ICollection<AppxPackageGroup>? _appxPackageGroups;
        public virtual ICollection<AppxPackageGroup> AppxPackageGroups 
        {
            get => _appxPackageGroups ??= new List<AppxPackageGroup>();
            set => _appxPackageGroups = value;
        }

        /// <summary>
        /// Verifica se o modelo tem dispositivos associados.
        /// </summary>
        public bool HasDevices => _devices?.Count > 0;

        /// <summary>
        /// Obtém a contagem de dispositivos no modelo.
        /// </summary>
        public int DeviceCount => _devices?.Count ?? 0;

        /// <summary>
        /// Verifica se o modelo tem pacotes de driver associados.
        /// </summary>
        public bool HasDriverPacks => _driverPacks?.Count > 0;

        /// <summary>
        /// Obtém a contagem de pacotes de driver no modelo.
        /// </summary>
        public int DriverPackCount => _driverPacks?.Count ?? 0;

        /// <summary>
        /// Verifica se o modelo tem grupos de aplicações associados.
        /// </summary>
        public bool HasApplicationGroups => _applicationGroups?.Count > 0;

        /// <summary>
        /// Obtém a contagem de grupos de aplicações no modelo.
        /// </summary>
        public int ApplicationGroupCount => _applicationGroups?.Count ?? 0;

        /// <summary>
        /// Verifica se o modelo tem grupos de pacotes AppX associados.
        /// </summary>
        public bool HasAppxPackageGroups => _appxPackageGroups?.Count > 0;

        /// <summary>
        /// Obtém a contagem de grupos de pacotes AppX no modelo.
        /// </summary>
        public int AppxPackageGroupCount => _appxPackageGroups?.Count ?? 0;

        /// <summary>
        /// Verifica se o modelo tem firmware associado.
        /// </summary>
        public bool HasFirmware => Firmware != null;

        #region Devices - Domain Encapsulation
        /// <summary>
        /// Adiciona um dispositivo ao modelo com regras de domínio.
        /// </summary>
        public void AddDevice(Device device)
            => this.AddItem(Devices, device, ValidateDeviceAssignment);

        /// <summary>
        /// Remove um dispositivo do modelo.
        /// </summary>
        public void RemoveDevice(Device device)
            => this.RemoveItem(Devices, device);

        /// <summary>
        /// Verifica se o modelo contém um dispositivo específico.
        /// </summary>
        public bool ContainsDevice(Device device) => Devices.ContainsItem(device);

        /// <summary>
        /// Remove todos os dispositivos do modelo.
        /// </summary>
        public void ClearDevices() => this.ClearItems(Devices);

        /// <summary>
        /// Valida se um dispositivo pode ser adicionado ao modelo.
        /// </summary>
        private void ValidateDeviceAssignment(Device device)
        {
            if (!device.Enabled)
                throw new InvalidOperationException("Cannot add disabled device to device model");

            if (!Enabled)
                throw new InvalidOperationException("Cannot add device to disabled device model");
        }
        #endregion

        #region DriverPacks - Domain Encapsulation
        /// <summary>
        /// Adiciona um pacote de driver ao modelo com regras de domínio.
        /// </summary>
        public void AddDriverPack(DriverPack driverPack)
            => this.AddItem(DriverPacks, driverPack, dp =>
            {
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add driver pack to disabled device model");
                
                if (!dp.Enabled)
                    throw new InvalidOperationException("Cannot add disabled driver pack to device model");
            });

        /// <summary>
        /// Remove um pacote de driver do modelo.
        /// </summary>
        public void RemoveDriverPack(DriverPack driverPack)
            => this.RemoveItem(DriverPacks, driverPack);

        /// <summary>
        /// Verifica se o modelo contém um pacote de driver específico.
        /// </summary>
        public bool ContainsDriverPack(DriverPack driverPack) => DriverPacks.ContainsItem(driverPack);

        /// <summary>
        /// Remove todos os pacotes de driver do modelo.
        /// </summary>
        public void ClearDriverPacks() => this.ClearItems(DriverPacks);
        #endregion

        #region ApplicationGroups - Domain Encapsulation
        /// <summary>
        /// Adiciona um grupo de aplicações ao modelo com regras de domínio.
        /// </summary>
        public void AddApplicationGroup(ApplicationGroup group)
            => this.AddItem(ApplicationGroups, group, g =>
            {
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add application group to disabled device model");
                
                if (!g.Enabled)
                    throw new InvalidOperationException("Cannot add disabled application group to device model");
            });

        /// <summary>
        /// Remove um grupo de aplicações do modelo.
        /// </summary>
        public void RemoveApplicationGroup(ApplicationGroup group)
            => this.RemoveItem(ApplicationGroups, group);

        /// <summary>
        /// Verifica se o modelo contém um grupo de aplicações específico.
        /// </summary>
        public bool ContainsApplicationGroup(ApplicationGroup group) => ApplicationGroups.ContainsItem(group);

        /// <summary>
        /// Remove todos os grupos de aplicações do modelo.
        /// </summary>
        public void ClearApplicationGroups() => this.ClearItems(ApplicationGroups);
        #endregion

        #region AppxPackageGroups - Domain Encapsulation
        /// <summary>
        /// Adiciona um grupo de pacotes AppX ao modelo com regras de domínio.
        /// </summary>
        public void AddAppxPackageGroup(AppxPackageGroup group)
            => this.AddItem(AppxPackageGroups, group, g =>
            {
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add appx package group to disabled device model");
                
                if (!g.Enabled)
                    throw new InvalidOperationException("Cannot add disabled appx package group to device model");
            });

        /// <summary>
        /// Remove um grupo de pacotes AppX do modelo.
        /// </summary>
        public void RemoveAppxPackageGroup(AppxPackageGroup group)
            => this.RemoveItem(AppxPackageGroups, group);

        /// <summary>
        /// Verifica se o modelo contém um grupo de pacotes AppX específico.
        /// </summary>
        public bool ContainsAppxPackageGroup(AppxPackageGroup group) => AppxPackageGroups.ContainsItem(group);

        /// <summary>
        /// Remove todos os grupos de pacotes AppX do modelo.
        /// </summary>
        public void ClearAppxPackageGroups() => this.ClearItems(AppxPackageGroups);
        #endregion

        #region Firmware - Domain Encapsulation
        /// <summary>
        /// Associa um firmware ao modelo de dispositivo.
        /// </summary>
        /// <param name="firmware">Firmware a ser associado</param>
        /// <exception cref="ArgumentNullException">Se o firmware for nulo</exception>
        /// <exception cref="InvalidOperationException">Se o modelo estiver desabilitado ou já tiver firmware</exception>
        public void AssignFirmware(Firmware firmware)
        {
            ArgumentNullException.ThrowIfNull(firmware);

            if (!Enabled)
                throw new InvalidOperationException("Cannot assign firmware to disabled device model");

            if (!firmware.Enabled)
                throw new InvalidOperationException("Cannot assign disabled firmware to device model");

            if (Firmware != null)
                throw new InvalidOperationException("Device model already has firmware assigned. Use UpdateFirmware or RemoveFirmware first.");

            Firmware = firmware;
            Update();
        }

        /// <summary>
        /// Atualiza o firmware associado ao modelo.
        /// </summary>
        /// <param name="firmware">Novo firmware</param>
        public void UpdateFirmware(Firmware firmware)
        {
            ArgumentNullException.ThrowIfNull(firmware);

            if (!Enabled)
                throw new InvalidOperationException("Cannot update firmware on disabled device model");

            if (!firmware.Enabled)
                throw new InvalidOperationException("Cannot assign disabled firmware to device model");

            Firmware = firmware;
            Update();
        }

        /// <summary>
        /// Remove o firmware associado ao modelo.
        /// </summary>
        public void RemoveFirmware()
        {
            if (Firmware != null)
            {
                Firmware = null;
                Update();
            }
        }
        #endregion

        /// <summary>
        /// Obtém uma representação textual do modelo de dispositivo.
        /// </summary>
        /// <returns>String no formato "Fabricante Modelo (Tipo)"</returns>
        public override string ToString()
        {
            var result = $"{Manufacturer} {Model}";
            if (!string.IsNullOrWhiteSpace(Type))
                result += $" ({Type})";
            return result;
        }
    }
}
