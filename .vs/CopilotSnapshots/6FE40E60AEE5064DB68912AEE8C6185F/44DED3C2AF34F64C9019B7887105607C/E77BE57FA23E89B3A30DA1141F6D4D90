using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace DCM.Core.Entities.secondary
{
    /// <summary>
    /// Representa um grupo de pacotes AppX para organização e implantação conjunta.
    /// </summary>
    public class AppxPackageGroup : BaseEntity
    {
        /// <summary>
        /// Nome do grupo de pacotes AppX.
        /// </summary>
        [Required, StringLength(100)]
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Descrição do grupo de pacotes AppX.
        /// </summary>
        [StringLength(240)]
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Prioridade do grupo para ordenação de instalação.
        /// Valores menores têm maior prioridade.
        /// </summary>
        [Range(1, 9999, ErrorMessage = "A prioridade deve estar entre 1 e 9999.")]
        public int Priority { get; set; } = 100;

        /// <summary>
        /// Construtor vazio para o Entity Framework.
        /// </summary>
        public AppxPackageGroup() { }

        /// <summary>
        /// Construtor para criar um grupo com nome e descrição.
        /// </summary>
        /// <param name="name">Nome do grupo</param>
        /// <param name="description">Descrição do grupo</param>
        /// <param name="priority">Prioridade do grupo (padrão: 100)</param>
        public AppxPackageGroup(string name, string description = "", int priority = 100)
        {
            Name = name;
            Description = description;
            Priority = priority;
        }

        /// <summary>
        /// Pacotes AppX associados ao grupo (relacionamento many-to-many).
        /// </summary>
        public virtual ICollection<AppxPackage> AppxPackages { get; set; } = new List<AppxPackage>();

        /// <summary>
        /// Dispositivos associados ao grupo (relacionamento many-to-many).
        /// </summary>
        public virtual ICollection<Device> Devices { get; set; } = new List<Device>();

        /// <summary>
        /// Modelos de dispositivos associados ao grupo (relacionamento many-to-many).
        /// </summary>
        public virtual ICollection<DeviceModel> DeviceModels { get; set; } = new List<DeviceModel>();

        /// <summary>
        /// Perfis de implantação que utilizam este grupo (relacionamento many-to-many).
        /// </summary>
        public virtual ICollection<DeployProfile> DeployProfiles { get; set; } = new List<DeployProfile>();

        /// <summary>
        /// Verifica se o grupo tem pacotes AppX associados.
        /// </summary>
        public bool HasAppxPackages => AppxPackages?.Count > 0;

        /// <summary>
        /// Obtém a contagem de pacotes AppX no grupo.
        /// </summary>
        public int AppxPackageCount => AppxPackages?.Count ?? 0;

        /// <summary>
        /// Verifica se o grupo tem dispositivos associados.
        /// </summary>
        public bool HasDevices => Devices?.Count > 0;

        /// <summary>
        /// Obtém a contagem de dispositivos no grupo.
        /// </summary>
        public int DeviceCount => Devices?.Count ?? 0;

        /// <summary>
        /// Verifica se o grupo tem modelos de dispositivos associados.
        /// </summary>
        public bool HasDeviceModels => DeviceModels?.Count > 0;

        /// <summary>
        /// Obtém a contagem de modelos de dispositivos no grupo.
        /// </summary>
        public int DeviceModelCount => DeviceModels?.Count ?? 0;

        /// <summary>
        /// Verifica se o grupo está associado a perfis de implantação.
        /// </summary>
        public bool HasDeployProfiles => DeployProfiles?.Count > 0;

        /// <summary>
        /// Obtém a contagem de perfis de implantação associados ao grupo.
        /// </summary>
        public int DeployProfileCount => DeployProfiles?.Count ?? 0;

        #region AppxPackages
        /// <summary>
        /// Adiciona um pacote AppX ao grupo com regras de domínio.
        /// </summary>
        public void AddAppxPackage(AppxPackage package)
            => this.AddItem(AppxPackages, package, p => 
            { 
                if (!Enabled) 
                    throw new InvalidOperationException("Cannot add package to disabled group"); 
            });

        /// <summary>
        /// Remove um pacote AppX do grupo.
        /// </summary>
        public void RemoveAppxPackage(AppxPackage package)
            => this.RemoveItem(AppxPackages, package);

        /// <summary>
        /// Verifica se um pacote AppX pertence ao grupo.
        /// </summary>
        public bool ContainsAppxPackage(AppxPackage package) => AppxPackages.ContainsItem(package);

        /// <summary>
        /// Remove todos os pacotes AppX do grupo.
        /// </summary>
        public void ClearAppxPackages() => this.ClearItems(AppxPackages);
        #endregion

        #region Devices
        /// <summary>
        /// Adiciona um dispositivo ao grupo com regras de domínio.
        /// </summary>
        public void AddDevice(Device device)
            => this.AddItem(Devices, device, d =>
            {
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add device to disabled group");
            });

        /// <summary>
        /// Remove um dispositivo do grupo.
        /// </summary>
        public void RemoveDevice(Device device)
            => this.RemoveItem(Devices, device);

        /// <summary>
        /// Verifica se um dispositivo pertence ao grupo.
        /// </summary>
        public bool ContainsDevice(Device device) => Devices.ContainsItem(device);

        /// <summary>
        /// Remove todos os dispositivos do grupo.
        /// </summary>
        public void ClearDevices() => this.ClearItems(Devices);
        #endregion

        #region DeviceModels
        /// <summary>
        /// Adiciona um modelo de dispositivo ao grupo com regras de domínio.
        /// </summary>
        public void AddDeviceModel(DeviceModel model)
            => this.AddItem(DeviceModels, model, m =>
            {
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add device model to disabled group");
            });

        /// <summary>
        /// Remove um modelo de dispositivo do grupo.
        /// </summary>
        public void RemoveDeviceModel(DeviceModel model)
            => this.RemoveItem(DeviceModels, model);

        /// <summary>
        /// Verifica se um modelo de dispositivo pertence ao grupo.
        /// </summary>
        public bool ContainsDeviceModel(DeviceModel model) => DeviceModels.ContainsItem(model);

        /// <summary>
        /// Remove todos os modelos de dispositivos do grupo.
        /// </summary>
        public void ClearDeviceModels() => this.ClearItems(DeviceModels);
        #endregion

        #region DeployProfiles
        /// <summary>
        /// Adiciona um perfil de implantação ao grupo.
        /// </summary>
        public void AddDeployProfile(DeployProfile profile)
            => this.AddItem(DeployProfiles, profile, p => 
            { 
                if (!Enabled) 
                    throw new InvalidOperationException("Cannot add deploy profile to disabled group"); 
            });

        /// <summary>
        /// Remove um perfil de implantação do grupo.
        /// </summary>
        public void RemoveDeployProfile(DeployProfile profile)
            => this.RemoveItem(DeployProfiles, profile);

        /// <summary>
        /// Verifica se um perfil de implantação pertence ao grupo.
        /// </summary>
        public bool ContainsDeployProfile(DeployProfile profile) => DeployProfiles.ContainsItem(profile);

        /// <summary>
        /// Remove todos os perfis de implantação do grupo.
        /// </summary>
        public void ClearDeployProfiles() => this.ClearItems(DeployProfiles);
        #endregion
    }
}