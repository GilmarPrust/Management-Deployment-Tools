using DCM.Core.Entities.secondary;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace DCM.Core.Entities
{
    /// <summary>
    /// Representa um modelo de dispositivo, incluindo fabricante, modelo, tipo e associações.
    /// </summary>
    public class DeviceModel : BaseEntity
    {
        /// <summary>
        /// Nome do fabricante do modelo de dispositivo.
        /// </summary>
        [Required, StringLength(50)]
        public string Manufacturer { get; set; } = string.Empty;

        /// <summary>
        /// Nome do modelo do dispositivo.
        /// </summary>
        [Required, StringLength(50)]
        public string Model { get; set; } = string.Empty;

        /// <summary>
        /// Tipo do modelo de dispositivo.
        /// </summary>
        [StringLength(50)]
        public string Type { get; set; } = string.Empty;

        /// <summary>
        /// Construtor vazio para o Entity Framework.
        /// </summary>
        public DeviceModel() { }

        /// <summary>
        /// Firmware associado ao modelo de dispositivo (opcional).
        /// </summary>
        public virtual Firmware? Firmware { get; set; }

        // Backings para EF Core
        public virtual ICollection<Device> Devices { get; set; } = new List<Device>();
        public virtual ICollection<DriverPack> DriverPacks { get; set; } = new List<DriverPack>();
        public virtual ICollection<ApplicationGroup> ApplicationGroups { get; set; } = new List<ApplicationGroup>();
        public virtual ICollection<AppxPackageGroup> AppxPackageGroup { get; set; } = new List<AppxPackageGroup>();

        #region Devices - Domain Encapsulation
        /// <summary>
        /// Adiciona um dispositivo ao modelo com regras de domínio.
        /// </summary>
        public void AddDevice(Device device)
            => this.AddItem(Devices, device, ValidateDeviceAssignment);

        /// <summary>
        /// Remove um dispositivo do modelo.
        /// </summary>
        public void RemoveDevice(Device device)
            => this.RemoveItem(Devices, device);

        /// <summary>
        /// Verifica se o modelo contém um dispositivo específico.
        /// </summary>
        public bool ContainsDevice(Device device) => Devices.ContainsItem(device);

        /// <summary>
        /// Valida se um dispositivo pode ser adicionado ao modelo.
        /// </summary>
        private void ValidateDeviceAssignment(Device device)
        {
            if (!device.Enabled)
                throw new InvalidOperationException("Cannot add disabled device to device model");

            if (!Enabled)
                throw new InvalidOperationException("Cannot add device to disabled device model");
        }
        #endregion

        #region DriverPacks - Domain Encapsulation
        /// <summary>
        /// Adiciona um pacote de driver OEM ao modelo com regras de domínio.
        /// </summary>
        public void AddDriverPack(DriverPack driverPack)
            => this.AddItem(DriverPacks, driverPack, dp =>
            {
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add driver pack to disabled device model");
            });

        /// <summary>
        /// Remove um pacote de driver OEM do modelo.
        /// </summary>
        public void RemoveDriverPack(DriverPack driverPack)
            => this.RemoveItem(DriverPacks, driverPack);

        /// <summary>
        /// Verifica se o modelo contém um pacote de driver OEM específico.
        /// </summary>
        public bool ContainsDriverPack(DriverPack driverPack) => DriverPacks.ContainsItem(driverPack);
        #endregion

        #region ApplicationGroups - Domain Encapsulation
        /// <summary>
        /// Adiciona um grupo de aplicações ao modelo com regras de domínio.
        /// </summary>
        public void AddApplicationGroup(ApplicationGroup group)
            => this.AddItem(ApplicationGroups, group, g =>
            {
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add application group to disabled device model");
            });

        /// <summary>
        /// Remove um grupo de aplicações do modelo.
        /// </summary>
        public void RemoveApplicationGroup(ApplicationGroup group)
            => this.RemoveItem(ApplicationGroups, group);

        /// <summary>
        /// Verifica se o modelo contém um grupo de aplicações específico.
        /// </summary>
        public bool ContainsApplicationGroup(ApplicationGroup group) => ApplicationGroups.ContainsItem(group);
        #endregion

        #region AppxPackageGroups - Domain Encapsulation
        /// <summary>
        /// Adiciona um grupo de pacotes AppX ao modelo com regras de domínio.
        /// </summary>
        public void AddAppxPackageGroup(AppxPackageGroup group)
            => this.AddItem(AppxPackageGroup, group, g =>
            {
                if (!Enabled)
                    throw new InvalidOperationException("Cannot add appx package group to disabled device model");
            });

        /// <summary>
        /// Remove um grupo de pacotes AppX do modelo.
        /// </summary>
        public void RemoveAppxPackageGroup(AppxPackageGroup group)
            => this.RemoveItem(AppxPackageGroup, group);

        /// <summary>
        /// Verifica se o modelo contém um grupo de pacotes AppX específico.
        /// </summary>
        public bool ContainsAppxPackageGroup(AppxPackageGroup group) => AppxPackageGroup.ContainsItem(group);
        #endregion
    }
}
