using API.DTOs.Application;
using API.Services.Interfaces;
using Microsoft.AspNetCore.Routing;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;

namespace API.EndPoints
{
    /// <summary>
    /// Define os endpoints para operações CRUD de Application.
    /// O agrupamento e as especificações de rota são definidos na chamada de MapGroup.
    /// </summary>
    public static class ApplicationEndpoints
    {
        /// <summary>
        /// Mapeia os endpoints de Application no grupo fornecido.
        /// As configurações de rota, tags e documentação devem ser feitas na chamada de MapGroup.
        /// </summary>
        /// <param name="group">O RouteGroupBuilder já configurado com rota base e metadados.</param>
        /// <returns>O RouteGroupBuilder com endpoints mapeados.</returns>
        public static RouteGroupBuilder MapApplicationEndpoints(this RouteGroupBuilder group)
        {
            // GET all Applications
            group.MapGet("/", async (IApplicationService service) =>
            {
                var result = await service.GetAllAsync();
                return Results.Ok(result);
            })
            .WithName("GetAllApplications")
            .WithSummary("Obtém todas as aplicações.")
            .WithDescription("Retorna uma lista de todas as aplicações cadastradas.");

            // GET Application by Id
            group.MapGet("/{id:guid}", async (Guid id, IApplicationService service) =>
            {
                var result = await service.GetByIdAsync(id);
                return result is not null ? Results.Ok(result) : Results.NotFound();
            })
            .WithName("GetApplicationById")
            .WithSummary("Obtém uma aplicação pelo Id.")
            .WithDescription("Retorna os dados de uma aplicação específica pelo seu identificador.");

            // POST Application
            group.MapPost("/", async (ApplicationCreateDTO dto, IApplicationService service) =>
            {
                var created = await service.CreateAsync(dto);
                return Results.Created($"/api/applications/{created.Id}", created);
            })
            .WithName("CreateApplication")
            .WithSummary("Cria uma nova aplicação.")
            .WithDescription("Adiciona uma nova aplicação ao sistema.");

            // PUT Application
            group.MapPut("/{id:guid}", async (Guid id, ApplicationUpdateDTO dto, IApplicationService service) =>
            {
                var updated = await service.UpdateAsync(id, dto);
                return updated is not null ? Results.Ok(updated) : Results.NotFound();
            })
            .WithName("UpdateApplication")
            .WithSummary("Atualiza uma aplicação existente.")
            .WithDescription("Atualiza os dados de uma aplicação pelo seu identificador.");

            // DELETE Application
            group.MapDelete("/{id:guid}", async (Guid id, IApplicationService service) =>
            {
                var deleted = await service.DeleteAsync(id);
                return deleted ? Results.NoContent() : Results.NotFound();
            })
            .WithName("DeleteApplication")
            .WithSummary("Remove uma aplicação.")
            .WithDescription("Remove uma aplicação do sistema pelo seu identificador.");

            return group;
        }
    }
}
