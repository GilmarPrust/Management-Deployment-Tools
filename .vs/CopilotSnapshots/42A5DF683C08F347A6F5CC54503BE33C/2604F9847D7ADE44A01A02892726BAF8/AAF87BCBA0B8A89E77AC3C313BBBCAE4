using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;

namespace DCM.Core.Entities
{
    /// <summary>
    /// Representa um perfil de implantação, incluindo imagem, aplicativos, dispositivos e tarefas associadas.
    /// </summary>
    public class DeployProfile : BaseEntity
    {
        /// <summary>
        /// Nome do perfil de implantação.
        /// </summary>
        [Required, StringLength(100)]
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Descrição do perfil de implantação.
        /// </summary>
        [StringLength(250)]
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Ordem de prioridade do perfil (menor número = maior prioridade).
        /// </summary>
        [Range(0, int.MaxValue, ErrorMessage = "A prioridade deve ser um número positivo.")]
        public int Priority { get; set; } = 0;

        /// <summary>
        /// Categoria do perfil (ex: "Produção", "Desenvolvimento", "Teste").
        /// </summary>
        [StringLength(50)]
        public string Category { get; set; } = string.Empty;

        /// <summary>
        /// Chave estrangeira para a imagem associada ao perfil.
        /// </summary>
        [Required]
        public Guid ImageId { get; set; }

        /// <summary>
        /// Imagem associada ao perfil.
        /// </summary>
        public virtual Image Image { get; set; }

        /// <summary>
        /// Chave estrangeira opcional para o grupo de aplicações associado.
        /// </summary>
        public Guid? ApplicationGroupId { get; set; }

        /// <summary>
        /// Grupo de aplicações associado ao perfil (relacionamento opcional).
        /// </summary>
        public virtual ApplicationGroup? ApplicationGroup { get; set; }

        /// <summary>
        /// Chave estrangeira opcional para o grupo de pacotes AppX associado.
        /// </summary>
        public Guid? AppxPackageGroupId { get; set; }

        /// <summary>
        /// Grupo de pacotes AppX associado ao perfil (relacionamento opcional).
        /// </summary>
        public virtual AppxPackageGroup? AppxPackageGroup { get; set; }

        /// <summary>
        /// Construtor vazio para o Entity Framework.
        /// </summary>
        public DeployProfile() { }

        /// <summary>
        /// Aplicativos associados ao perfil (relacionamento many-to-many).
        /// </summary>
        public virtual ICollection<Application> Applications { get; set; } = new List<Application>();

        /// <summary>
        /// Dispositivos associados ao perfil (relacionamento one-to-many).
        /// </summary>
        public virtual ICollection<Device> Devices { get; set; } = new List<Device>();

        /// <summary>
        /// Tarefas de perfil associadas ao perfil de implantação (relacionamento many-to-many).
        /// </summary>
        public virtual ICollection<ProfileTask> ProfileTasks { get; set; } = new List<ProfileTask>();

        /// <summary>
        /// Método para validar se o perfil está configurado corretamente.
        /// </summary>
        /// <returns>True se o perfil é válido, caso contrário False.</returns>
        public bool IsValid()
        {
            return !string.IsNullOrWhiteSpace(Name) && 
                   ImageId != Guid.Empty && 
                   Image != null;
        }

        /// <summary>
        /// Método para adicionar uma aplicação ao perfil.
        /// </summary>
        /// <param name="application">Aplicação a ser adicionada.</param>
        public void AddApplication(Application application)
        {
            if (application != null && !Applications.Contains(application))
            {
                Applications.Add(application);
                Update();
            }
        }

        /// <summary>
        /// Método para remover uma aplicação do perfil.
        /// </summary>
        /// <param name="application">Aplicação a ser removida.</param>
        public void RemoveApplication(Application application)
        {
            if (application != null && Applications.Contains(application))
            {
                Applications.Remove(application);
                Update();
            }
        }

        /// <summary>
        /// Método para adicionar um dispositivo ao perfil.
        /// </summary>
        /// <param name="device">Dispositivo a ser adicionado.</param>
        public void AddDevice(Device device)
        {
            if (device != null && !Devices.Contains(device))
            {
                Devices.Add(device);
                Update();
            }
        }

        /// <summary>
        /// Método para remover um dispositivo do perfil.
        /// </summary>
        /// <param name="device">Dispositivo a ser removido.</param>
        public void RemoveDevice(Device device)
        {
            if (device != null && Devices.Contains(device))
            {
                Devices.Remove(device);
                Update();
            }
        }

        /// <summary>
        /// Método para adicionar uma tarefa ao perfil.
        /// </summary>
        /// <param name="profileTask">Tarefa a ser adicionada.</param>
        public void AddProfileTask(ProfileTask profileTask)
        {
            if (profileTask != null && !ProfileTasks.Contains(profileTask))
            {
                ProfileTasks.Add(profileTask);
                Update();
            }
        }

        /// <summary>
        /// Método para remover uma tarefa do perfil.
        /// </summary>
        /// <param name="profileTask">Tarefa a ser removida.</param>
        public void RemoveProfileTask(ProfileTask profileTask)
        {
            if (profileTask != null && ProfileTasks.Contains(profileTask))
            {
                ProfileTasks.Remove(profileTask);
                Update();
            }
        }

        /// <summary>
        /// Obtém a contagem total de dispositivos associados a este perfil.
        /// </summary>
        public int DeviceCount => Devices?.Count ?? 0;

        /// <summary>
        /// Obtém a contagem total de aplicações associadas a este perfil.
        /// </summary>
        public int ApplicationCount => Applications?.Count ?? 0;

        /// <summary>
        /// Obtém a contagem total de tarefas associadas a este perfil.
        /// </summary>
        public int ProfileTaskCount => ProfileTasks?.Count ?? 0;

        /// <summary>
        /// Verifica se o perfil possui dispositivos associados.
        /// </summary>
        public bool HasDevices => DeviceCount > 0;

        /// <summary>
        /// Verifica se o perfil possui aplicações associadas.
        /// </summary>
        public bool HasApplications => ApplicationCount > 0;

        /// <summary>
        /// Verifica se o perfil possui tarefas associadas.
        /// </summary>
        public bool HasProfileTasks => ProfileTaskCount > 0;
    }
}
