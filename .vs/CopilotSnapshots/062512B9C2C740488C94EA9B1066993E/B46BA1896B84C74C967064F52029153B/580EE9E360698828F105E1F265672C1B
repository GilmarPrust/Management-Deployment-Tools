using Microsoft.EntityFrameworkCore;
using DCM.Core.Entities;
using DCM.Core.Interfaces.Repositories;
using DCM.Infrastructure.Persistence;

namespace DCM.Infrastructure.Repositories
{
    /// <summary>
    /// Implementação específica do repositório de dispositivos.
    /// </summary>
    public class DeviceRepository : Repository<Device>, IDeviceRepository
    {
        public DeviceRepository(AppDbContext context) : base(context)
        {
        }

        /// <inheritdoc/>
        public async Task<Device?> GetByComputerNameAsync(string computerName, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(computerName))
                return null;

            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .FirstOrDefaultAsync(d => d.ComputerName.Value == computerName, cancellationToken);
        }

        /// <inheritdoc/>
        public async Task<Device?> GetByMacAddressAsync(string macAddress, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(macAddress))
                return null;

            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .FirstOrDefaultAsync(d => d.MacAddress.Value == macAddress, cancellationToken);
        }

        /// <inheritdoc/>
        public async Task<Device?> GetBySerialNumberAsync(string serialNumber, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(serialNumber))
                return null;

            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .FirstOrDefaultAsync(d => d.SerialNumber == serialNumber, cancellationToken);
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<Device>> GetByDeviceModelAsync(Guid deviceModelId, CancellationToken cancellationToken = default)
        {
            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .Where(d => d.DeviceModelId == deviceModelId)
                .ToListAsync(cancellationToken);
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<Device>> GetWithAllRelationsAsync(CancellationToken cancellationToken = default)
        {
            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .Include(d => d.DeviceModel)
                .Include(d => d.DeployProfile)
                .Include(d => d.Applications)
                .Include(d => d.DriverPacks)
                .Include(d => d.AppxPackages)
                .Include(d => d.Inventory)
                .ToListAsync(cancellationToken);
        }
    }

    /// <summary>
    /// Implementação específica do repositório de modelos de dispositivo.
    /// </summary>
    public class DeviceModelRepository : Repository<DeviceModel>, IDeviceModelRepository
    {
        public DeviceModelRepository(AppDbContext context) : base(context)
        {
        }

        /// <inheritdoc/>
        public async Task<DeviceModel?> GetByManufacturerAndModelAsync(string manufacturer, string model, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(manufacturer) || string.IsNullOrWhiteSpace(model))
                return null;

            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .FirstOrDefaultAsync(dm => dm.Manufacturer == manufacturer && dm.Model == model, cancellationToken);
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<DeviceModel>> GetByManufacturerAsync(string manufacturer, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(manufacturer))
                return Enumerable.Empty<DeviceModel>();

            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .Where(dm => dm.Manufacturer == manufacturer)
                .ToListAsync(cancellationToken);
        }
    }

    /// <summary>
    /// Implementação específica do repositório de aplicações.
    /// </summary>
    public class ApplicationRepository : Repository<Application>, IApplicationRepository
    {
        public ApplicationRepository(AppDbContext context) : base(context)
        {
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<Application>> GetByApplicationGroupAsync(Guid applicationGroupId, CancellationToken cancellationToken = default)
        {
            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .Where(a => a.ApplicationGroupId == applicationGroupId)
                .ToListAsync(cancellationToken);
        }

        /// <inheritdoc/>
        public async Task<Application?> GetByNameIdAsync(string nameId, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(nameId))
                return null;

            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .FirstOrDefaultAsync(a => a.NameID == nameId, cancellationToken);
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<Application>> GetByVersionAsync(string version, CancellationToken cancellationToken = default)
        {
            if (string.IsNullOrWhiteSpace(version))
                return Enumerable.Empty<Application>();

            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .Where(a => a.Version == version)
                .ToListAsync(cancellationToken);
        }
    }

    /// <summary>
    /// Implementação específica do repositório de inventários.
    /// </summary>
    public class InventoryRepository : Repository<Inventory>, IInventoryRepository
    {
        public InventoryRepository(AppDbContext context) : base(context)
        {
        }

        /// <inheritdoc/>
        public async Task<Inventory?> GetByDeviceIdAsync(Guid deviceId, CancellationToken cancellationToken = default)
        {
            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .Include(i => i.Hardware)
                .FirstOrDefaultAsync(i => i.DeviceId == deviceId, cancellationToken);
        }

        /// <inheritdoc/>
        public async Task<IEnumerable<Inventory>> GetWithHardwareAsync(CancellationToken cancellationToken = default)
        {
            return await _dbSet
                .Where(e => !e.DeletedAt.HasValue)
                .Include(i => i.Hardware)
                .ToListAsync(cancellationToken);
        }
    }
}