// <auto-generated />
using System;
using DCM.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DCM.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250816224653_mig1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("ApplicationGroupMemberships", b =>
                {
                    b.Property<Guid>("ApplicationGroupsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ApplicationGroupsId", "ApplicationsId");

                    b.HasIndex("ApplicationsId");

                    b.ToTable("ApplicationGroupMemberships");
                });

            modelBuilder.Entity("AppxPackageGroupMemberships", b =>
                {
                    b.Property<Guid>("AppxPackageGroupsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AppxPackagesId")
                        .HasColumnType("TEXT");

                    b.HasKey("AppxPackageGroupsId", "AppxPackagesId");

                    b.HasIndex("AppxPackagesId");

                    b.ToTable("AppxPackageGroupMemberships");
                });

            modelBuilder.Entity("DCM.Core.Entities.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Argument")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Filter")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("NameID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NameID")
                        .IsUnique();

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DCM.Core.Entities.AppxPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Architecture")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBundle")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDevelopmentMode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFramework")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPartiallyStaged")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsResourcePackage")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PackageFamilyName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PackageFullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PackageFullName")
                        .IsUnique();

                    b.ToTable("AppxPackages");
                });

            modelBuilder.Entity("DCM.Core.Entities.DeployProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AppxPackageGroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationGroupId");

                    b.HasIndex("AppxPackageGroupId");

                    b.HasIndex("ImageId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeployProfiles");
                });

            modelBuilder.Entity("DCM.Core.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT")
                        .HasColumnName("ComputerName");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeployProfileId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceModelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MacAddress")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("TEXT")
                        .HasColumnName("MacAddress");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ComputerName")
                        .IsUnique();

                    b.HasIndex("DeployProfileId");

                    b.HasIndex("DeviceModelId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DCM.Core.Entities.DeviceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Manufacturer", "Model")
                        .IsUnique();

                    b.ToTable("DeviceModels");
                });

            modelBuilder.Entity("DCM.Core.Entities.DriverPack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeviceModelId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOEM")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceModelId", "OS");

                    b.ToTable("DriverPacks");
                });

            modelBuilder.Entity("DCM.Core.Entities.Firmware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceModelId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceModelId")
                        .IsUnique();

                    b.ToTable("Firmwares");
                });

            modelBuilder.Entity("DCM.Core.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EditionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageDescription")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("ImageIndex")
                        .HasMaxLength(20)
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<long>("ImageSize")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("Languages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OperatingSystemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OperatingSystemId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DCM.Core.Entities.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId")
                        .IsUnique();

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("DCM.Core.Entities.InventoryHardware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("InventoryHardware");
                });

            modelBuilder.Entity("DCM.Core.Entities.Manufacturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("DCM.Core.Entities.OperatingSystem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ShortName")
                        .IsUnique();

                    b.ToTable("OperatingSystems");
                });

            modelBuilder.Entity("DCM.Core.Entities.ProfileTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProfileTasks");
                });

            modelBuilder.Entity("DCM.Core.Entities.secondary.ApplicationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApplicationGroups");
                });

            modelBuilder.Entity("DCM.Core.Entities.secondary.AppxPackageGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AppxPackageGroups");
                });

            modelBuilder.Entity("DeployProfileApplications", b =>
                {
                    b.Property<Guid>("ApplicationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeployProfilesId")
                        .HasColumnType("TEXT");

                    b.HasKey("ApplicationsId", "DeployProfilesId");

                    b.HasIndex("DeployProfilesId");

                    b.ToTable("DeployProfileApplications");
                });

            modelBuilder.Entity("DeployProfileTasks", b =>
                {
                    b.Property<Guid>("DeployProfilesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProfileTasksId")
                        .HasColumnType("TEXT");

                    b.HasKey("DeployProfilesId", "ProfileTasksId");

                    b.HasIndex("ProfileTasksId");

                    b.ToTable("DeployProfileTasks");
                });

            modelBuilder.Entity("DeviceApplications", b =>
                {
                    b.Property<Guid>("ApplicationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DevicesId")
                        .HasColumnType("TEXT");

                    b.HasKey("ApplicationsId", "DevicesId");

                    b.HasIndex("DevicesId");

                    b.ToTable("DeviceApplications");
                });

            modelBuilder.Entity("DeviceAppxPackages", b =>
                {
                    b.Property<Guid>("AppxPackagesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DevicesId")
                        .HasColumnType("TEXT");

                    b.HasKey("AppxPackagesId", "DevicesId");

                    b.HasIndex("DevicesId");

                    b.ToTable("DeviceAppxPackages");
                });

            modelBuilder.Entity("DeviceDriverPacks", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DriverPacksId")
                        .HasColumnType("TEXT");

                    b.HasKey("DeviceId", "DriverPacksId");

                    b.HasIndex("DriverPacksId");

                    b.ToTable("DeviceDriverPacks");
                });

            modelBuilder.Entity("DeviceModelApplications", b =>
                {
                    b.Property<Guid>("ApplicationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DeviceModelsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ApplicationsId", "DeviceModelsId");

                    b.HasIndex("DeviceModelsId");

                    b.ToTable("DeviceModelApplications");
                });

            modelBuilder.Entity("ApplicationGroupMemberships", b =>
                {
                    b.HasOne("DCM.Core.Entities.secondary.ApplicationGroup", null)
                        .WithMany()
                        .HasForeignKey("ApplicationGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCM.Core.Entities.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppxPackageGroupMemberships", b =>
                {
                    b.HasOne("DCM.Core.Entities.secondary.AppxPackageGroup", null)
                        .WithMany()
                        .HasForeignKey("AppxPackageGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCM.Core.Entities.AppxPackage", null)
                        .WithMany()
                        .HasForeignKey("AppxPackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DCM.Core.Entities.Application", b =>
                {
                    b.OwnsOne("DCM.Core.ValueObjects.ApplicationCategory", "Category", b1 =>
                        {
                            b1.Property<Guid>("ApplicationId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Description")
                                .HasMaxLength(200)
                                .HasColumnType("TEXT")
                                .HasColumnName("CategoryDescription");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT")
                                .HasColumnName("CategoryName");

                            b1.HasKey("ApplicationId");

                            b1.ToTable("Applications");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationId");
                        });

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DCM.Core.Entities.AppxPackage", b =>
                {
                    b.OwnsOne("DCM.Core.ValueObjects.ApplicationCategory", "Category", b1 =>
                        {
                            b1.Property<Guid>("AppxPackageId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Description")
                                .HasMaxLength(200)
                                .HasColumnType("TEXT")
                                .HasColumnName("CategoryDescription");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("TEXT")
                                .HasColumnName("CategoryName");

                            b1.HasKey("AppxPackageId");

                            b1.ToTable("AppxPackages");

                            b1.WithOwner()
                                .HasForeignKey("AppxPackageId");
                        });

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DCM.Core.Entities.DeployProfile", b =>
                {
                    b.HasOne("DCM.Core.Entities.secondary.ApplicationGroup", "ApplicationGroup")
                        .WithMany("DeployProfiles")
                        .HasForeignKey("ApplicationGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DCM.Core.Entities.secondary.AppxPackageGroup", "AppxPackageGroup")
                        .WithMany("DeployProfiles")
                        .HasForeignKey("AppxPackageGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DCM.Core.Entities.Image", "Image")
                        .WithMany("DeployProfiles")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationGroup");

                    b.Navigation("AppxPackageGroup");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("DCM.Core.Entities.Device", b =>
                {
                    b.HasOne("DCM.Core.Entities.DeployProfile", "DeployProfile")
                        .WithMany("Devices")
                        .HasForeignKey("DeployProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DCM.Core.Entities.DeviceModel", "DeviceModel")
                        .WithMany("Devices")
                        .HasForeignKey("DeviceModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DeployProfile");

                    b.Navigation("DeviceModel");
                });

            modelBuilder.Entity("DCM.Core.Entities.DriverPack", b =>
                {
                    b.HasOne("DCM.Core.Entities.DeviceModel", "DeviceModel")
                        .WithMany("DriverPacks")
                        .HasForeignKey("DeviceModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DeviceModel");
                });

            modelBuilder.Entity("DCM.Core.Entities.Firmware", b =>
                {
                    b.HasOne("DCM.Core.Entities.DeviceModel", "DeviceModel")
                        .WithOne("Firmware")
                        .HasForeignKey("DCM.Core.Entities.Firmware", "DeviceModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceModel");
                });

            modelBuilder.Entity("DCM.Core.Entities.Image", b =>
                {
                    b.HasOne("DCM.Core.Entities.OperatingSystem", "OperatingSystem")
                        .WithMany()
                        .HasForeignKey("OperatingSystemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OperatingSystem");
                });

            modelBuilder.Entity("DCM.Core.Entities.Inventory", b =>
                {
                    b.HasOne("DCM.Core.Entities.Device", "Device")
                        .WithOne("Inventory")
                        .HasForeignKey("DCM.Core.Entities.Inventory", "DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("DCM.Core.Entities.InventoryHardware", b =>
                {
                    b.HasOne("DCM.Core.Entities.Inventory", "Inventory")
                        .WithMany("Hardware")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("DeployProfileApplications", b =>
                {
                    b.HasOne("DCM.Core.Entities.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCM.Core.Entities.DeployProfile", null)
                        .WithMany()
                        .HasForeignKey("DeployProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeployProfileTasks", b =>
                {
                    b.HasOne("DCM.Core.Entities.DeployProfile", null)
                        .WithMany()
                        .HasForeignKey("DeployProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCM.Core.Entities.ProfileTask", null)
                        .WithMany()
                        .HasForeignKey("ProfileTasksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceApplications", b =>
                {
                    b.HasOne("DCM.Core.Entities.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCM.Core.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceAppxPackages", b =>
                {
                    b.HasOne("DCM.Core.Entities.AppxPackage", null)
                        .WithMany()
                        .HasForeignKey("AppxPackagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCM.Core.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceDriverPacks", b =>
                {
                    b.HasOne("DCM.Core.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCM.Core.Entities.DriverPack", null)
                        .WithMany()
                        .HasForeignKey("DriverPacksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeviceModelApplications", b =>
                {
                    b.HasOne("DCM.Core.Entities.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCM.Core.Entities.DeviceModel", null)
                        .WithMany()
                        .HasForeignKey("DeviceModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DCM.Core.Entities.DeployProfile", b =>
                {
                    b.Navigation("Devices");
                });

            modelBuilder.Entity("DCM.Core.Entities.Device", b =>
                {
                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("DCM.Core.Entities.DeviceModel", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("DriverPacks");

                    b.Navigation("Firmware");
                });

            modelBuilder.Entity("DCM.Core.Entities.Image", b =>
                {
                    b.Navigation("DeployProfiles");
                });

            modelBuilder.Entity("DCM.Core.Entities.Inventory", b =>
                {
                    b.Navigation("Hardware");
                });

            modelBuilder.Entity("DCM.Core.Entities.secondary.ApplicationGroup", b =>
                {
                    b.Navigation("DeployProfiles");
                });

            modelBuilder.Entity("DCM.Core.Entities.secondary.AppxPackageGroup", b =>
                {
                    b.Navigation("DeployProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
